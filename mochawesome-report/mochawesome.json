{
  "stats": {
    "suites": 10,
    "tests": 84,
    "passes": 68,
    "pending": 0,
    "failures": 16,
    "start": "2023-10-31T13:21:42.693Z",
    "end": "2023-10-31T13:21:42.735Z",
    "duration": 42,
    "testsRegistered": 84,
    "passPercent": 80.95238095238095,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bbb64df1-7b09-4dd1-9e67-41a95ecdc996",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
          "title": "ceil Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\ceil.test.js",
          "file": "\\test\\ceil.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should round up a decimal number to the nearest integer",
              "fullTitle": "ceil Function Tests should round up a decimal number to the nearest integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(4.006)).to.equal(5);",
              "err": {},
              "uuid": "63eeb336-5c97-416e-9967-b706d2c6ed34",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should round up a decimal number to the specified precision",
              "fullTitle": "ceil Function Tests should round up a decimal number to the specified precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(6.004, 2)).to.equal(6.01);",
              "err": {},
              "uuid": "bec0e9aa-a254-4220-9532-9dfc0ac07186",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should round up a large number to a negative precision",
              "fullTitle": "ceil Function Tests should round up a large number to a negative precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(6040, -2)).to.equal(6100);",
              "err": {},
              "uuid": "a13a6e2f-685c-4828-ba0c-bcaa3907e131",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle zero precision correctly",
              "fullTitle": "ceil Function Tests should handle zero precision correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(4.5, 0)).to.equal(5);",
              "err": {},
              "uuid": "3f48c0a5-59f6-4453-986c-3613a4125873",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the same number if no rounding is needed",
              "fullTitle": "ceil Function Tests should return the same number if no rounding is needed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(5, 0)).to.equal(5);",
              "err": {},
              "uuid": "4e12ccca-d48b-45b1-9b3c-65b1843093d3",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers correctly",
              "fullTitle": "ceil Function Tests should handle negative numbers correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(-4.6)).to.equal(-4);",
              "err": {},
              "uuid": "fc743d1a-c838-42fa-8630-9992c446bb03",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle rounding up to a higher negative precision",
              "fullTitle": "ceil Function Tests should handle rounding up to a higher negative precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(-4567, -2)).to.equal(-4500);",
              "err": {},
              "uuid": "90cd0b65-930b-411d-a89d-3d2736c73c48",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric inputs",
              "fullTitle": "ceil Function Tests should return NaN for non-numeric inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil('abc')).to.be.NaN;",
              "err": {},
              "uuid": "ce71367a-df80-46ec-8192-6b37620ce829",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle undefined and null inputs gracefully",
              "fullTitle": "ceil Function Tests should handle undefined and null inputs gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(undefined)).to.be.NaN;\nexpect(ceil(null)).to.equal(0);",
              "err": {},
              "uuid": "0b8e8581-85f4-4fc3-93c3-5e86e8201ada",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with extremely large numbers",
              "fullTitle": "ceil Function Tests should handle edge cases with extremely large numbers",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.7976931348623157e+308, -308)).to.equal(2e+308);",
              "err": {
                "message": "AssertionError: expected 1.7976931348623155e+308 to equal Infinity",
                "estack": "AssertionError: expected 1.7976931348623155e+308 to equal Infinity\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/ceil.test.js:44:52)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": "- 1.7976931348623155e+308\n+ Infinity\n"
              },
              "uuid": "4627fbea-c10d-4ad2-883f-d8cc6405d2ad",
              "parentUUID": "ca8a8dbe-5547-4a0e-b221-da203c6bda76",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "63eeb336-5c97-416e-9967-b706d2c6ed34",
            "bec0e9aa-a254-4220-9532-9dfc0ac07186",
            "a13a6e2f-685c-4828-ba0c-bcaa3907e131",
            "3f48c0a5-59f6-4453-986c-3613a4125873",
            "4e12ccca-d48b-45b1-9b3c-65b1843093d3",
            "fc743d1a-c838-42fa-8630-9992c446bb03",
            "90cd0b65-930b-411d-a89d-3d2736c73c48",
            "ce71367a-df80-46ec-8192-6b37620ce829",
            "0b8e8581-85f4-4fc3-93c3-5e86e8201ada"
          ],
          "failures": [
            "4627fbea-c10d-4ad2-883f-d8cc6405d2ad"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "823b5ed7-f796-49fe-8974-0885c23df48b",
          "title": "Chunk Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\chunk.test.js",
          "file": "\\test\\chunk.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should chunk an array into smaller arrays of a specified size",
              "fullTitle": "Chunk Function Tests should chunk an array into smaller arrays of a specified size",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(chunk(['a', 'b', 'c', 'd'], 2)).to.deep.equal([['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/chunk.test.js:7:52)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "7f6b8f63-e24f-4ffb-bc1c-3bc993e0f074",
              "parentUUID": "823b5ed7-f796-49fe-8974-0885c23df48b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle final chunk that is smaller than specified size",
              "fullTitle": "Chunk Function Tests should handle final chunk that is smaller than specified size",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(chunk(['a', 'b', 'c', 'd'], 3)).to.deep.equal([['a', 'b', 'c'], ['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd', undefined, undefined ], …(1) ] to deeply equal [ [ 'a', 'b', 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd', undefined, undefined ], …(1) ] to deeply equal [ [ 'a', 'b', 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/chunk.test.js:11:52)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n-     [undefined]\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "9e642fc8-08b1-4f62-b5b5-ae1e06580bc7",
              "parentUUID": "823b5ed7-f796-49fe-8974-0885c23df48b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array when input array is null or undefined",
              "fullTitle": "Chunk Function Tests should return empty array when input array is null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(chunk(null)).to.deep.equal([]);\nexpect(chunk(undefined)).to.deep.equal([]);",
              "err": {},
              "uuid": "40aba7cf-5a5c-41c5-9a5a-c4415b650e6f",
              "parentUUID": "823b5ed7-f796-49fe-8974-0885c23df48b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array when size is less than 1",
              "fullTitle": "Chunk Function Tests should return empty array when size is less than 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c', 'd'];\nexpect(chunk(array, 0)).to.deep.equal([]);",
              "err": {},
              "uuid": "2b707ba7-6d6a-4ece-8fde-17d00754cecd",
              "parentUUID": "823b5ed7-f796-49fe-8974-0885c23df48b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle non-integer size by rounding down",
              "fullTitle": "Chunk Function Tests should handle non-integer size by rounding down",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(chunk(['a', 'b', 'c', 'd'], 2.9)).to.deep.equal([['a', 'b'], ['c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'c', 'd' ], undefined ] to deeply equal [ [ 'a', 'b' ], [ 'c', 'd' ] ]\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/chunk.test.js:25:54)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": " [\n   [\n+     \"a\"\n+     \"b\"\n+   ]\n+   [\n     \"c\"\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "bfd44a85-8c53-40ef-8a6d-5bf3e03491ee",
              "parentUUID": "823b5ed7-f796-49fe-8974-0885c23df48b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the original array as a single chunk when size is equal or greater than array length",
              "fullTitle": "Chunk Function Tests should return the original array as a single chunk when size is equal or greater than array length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c', 'd'];\nexpect(chunk(array, 4)).to.deep.equal([['a', 'b', 'c', 'd']]);\nexpect(chunk(array, 5)).to.deep.equal([['a', 'b', 'c', 'd']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'a', 'b', 'c', 'd', undefined ] ] to deeply equal [ [ 'a', 'b', 'c', 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'a', 'b', 'c', 'd', undefined ] ] to deeply equal [ [ 'a', 'b', 'c', 'd' ] ]\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/chunk.test.js:31:37)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": "     \"a\"\n     \"b\"\n     \"c\"\n     \"d\"\n-     [undefined]\n   ]\n ]\n"
              },
              "uuid": "3bdf288e-36d5-41a5-88b0-289afe2e99aa",
              "parentUUID": "823b5ed7-f796-49fe-8974-0885c23df48b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty array",
              "fullTitle": "Chunk Function Tests should handle an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(chunk([], 2)).to.deep.equal([]);",
              "err": {},
              "uuid": "751f7de7-9b43-4394-bb00-4b3f51a68a69",
              "parentUUID": "823b5ed7-f796-49fe-8974-0885c23df48b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle size as undefined",
              "fullTitle": "Chunk Function Tests should handle size as undefined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const array = ['a', 'b', 'c', 'd'];\nexpect(chunk(array)).to.deep.equal([['a'], ['b'], ['c'], ['d']]);",
              "err": {
                "message": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]",
                "estack": "AssertionError: expected [ [ 'd' ], undefined, undefined, …(1) ] to deeply equal [ [ 'a' ], [ 'b' ], [ 'c' ], [ 'd' ] ]\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/chunk.test.js:40:34)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": " [\n   [\n+     \"a\"\n+   ]\n+   [\n+     \"b\"\n+   ]\n+   [\n+     \"c\"\n+   ]\n+   [\n     \"d\"\n   ]\n ]\n"
              },
              "uuid": "4953c8ae-45fa-45a1-a66b-b6ebebd936f8",
              "parentUUID": "823b5ed7-f796-49fe-8974-0885c23df48b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40aba7cf-5a5c-41c5-9a5a-c4415b650e6f",
            "2b707ba7-6d6a-4ece-8fde-17d00754cecd",
            "751f7de7-9b43-4394-bb00-4b3f51a68a69"
          ],
          "failures": [
            "7f6b8f63-e24f-4ffb-bc1c-3bc993e0f074",
            "9e642fc8-08b1-4f62-b5b5-ae1e06580bc7",
            "bfd44a85-8c53-40ef-8a6d-5bf3e03491ee",
            "3bdf288e-36d5-41a5-88b0-289afe2e99aa",
            "4953c8ae-45fa-45a1-a66b-b6ebebd936f8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6c53a2e4-db98-454d-aa69-3177e3e61ad6",
          "title": "countBy Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\countBy.test.js",
          "file": "\\test\\countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should count occurrences based on iteratee results",
              "fullTitle": "countBy Function Tests should count occurrences based on iteratee results",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'betty', 'active': true },\n  { 'user': 'fred', 'active': false }\n];\nexpect(countBy(users, value => value.active)).to.deep.equal({ 'true': 2, 'false': 1 });",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/countBy.test.js:12:59)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "50ebcf3c-07f3-4d64-88da-36fffb3261ec",
              "parentUUID": "6c53a2e4-db98-454d-aa69-3177e3e61ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an array of numbers correctly",
              "fullTitle": "countBy Function Tests should handle an array of numbers correctly",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(countBy([4.3, 6.1, 6.4], Math.floor)).to.deep.equal({ '4': 1, '6': 2 });",
              "err": {
                "message": "AssertionError: expected { '4': +0, '6': 1 } to deeply equal { '4': 1, '6': 2 }",
                "estack": "AssertionError: expected { '4': +0, '6': 1 } to deeply equal { '4': 1, '6': 2 }\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/countBy.test.js:16:58)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": " {\n-   \"4\": 0\n-   \"6\": 1\n+   \"4\": 1\n+   \"6\": 2\n }\n"
              },
              "uuid": "107189bd-6fc0-497f-918e-42483c647177",
              "parentUUID": "6c53a2e4-db98-454d-aa69-3177e3e61ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with iteratee shorthand",
              "fullTitle": "countBy Function Tests should work with iteratee shorthand",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred', 'age': 40 },\n  { 'user': 'pebbles', 'age': 1 }\n];\nexpect(countBy(users, 'age')).to.deep.equal({ '36': 1, '40': 1, '1': 1 });",
              "err": {
                "message": "TypeError: iteratee is not a function",
                "estack": "TypeError: iteratee is not a function\n    at file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/src/countBy.js:31:11\n    at arrayReduce (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/src/.internal/arrayReduce.js:20:19)\n    at reduce (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/src/reduce.js:41:10)\n    at countBy (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/src/countBy.js:30:10)\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/countBy.test.js:25:12)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": null
              },
              "uuid": "2f5ae7fe-3be8-439b-a411-d28daad5ac36",
              "parentUUID": "6c53a2e4-db98-454d-aa69-3177e3e61ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty collection",
              "fullTitle": "countBy Function Tests should handle an empty collection",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(countBy([], value => value)).to.deep.equal({});",
              "err": {},
              "uuid": "c4b59892-b959-4464-a839-0a33087d5485",
              "parentUUID": "6c53a2e4-db98-454d-aa69-3177e3e61ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty object for null or undefined input",
              "fullTitle": "countBy Function Tests should return an empty object for null or undefined input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(countBy(null, value => value)).to.deep.equal({});\nexpect(countBy(undefined, value => value)).to.deep.equal({});",
              "err": {},
              "uuid": "782f4f88-5695-4b03-ba13-d659edf4a4a3",
              "parentUUID": "6c53a2e4-db98-454d-aa69-3177e3e61ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should count strings in an array",
              "fullTitle": "countBy Function Tests should count strings in an array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const strings = ['one', 'two', 'one', 'three', 'one'];\nexpect(countBy(strings, identity => identity)).to.deep.equal({ 'one': 3, 'two': 1, 'three': 1 });",
              "err": {
                "message": "AssertionError: expected { one: 2, two: +0, three: +0 } to deeply equal { one: 3, two: 1, three: 1 }",
                "estack": "AssertionError: expected { one: 2, two: +0, three: +0 } to deeply equal { one: 3, two: 1, three: 1 }\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/countBy.test.js:39:60)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": " {\n-   \"one\": 2\n-   \"three\": 0\n-   \"two\": 0\n+   \"one\": 3\n+   \"three\": 1\n+   \"two\": 1\n }\n"
              },
              "uuid": "61aa22b7-b2d9-4b4a-931f-b85c7bd6a32c",
              "parentUUID": "6c53a2e4-db98-454d-aa69-3177e3e61ad6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not modify the original collection",
              "fullTitle": "countBy Function Tests should not modify the original collection",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const collection = ['a', 'b', 'a'];\ncountBy(collection, identity => identity);\nexpect(collection).to.deep.equal(['a', 'b', 'a']);",
              "err": {},
              "uuid": "aca6b186-236a-4483-aa09-43efaee51b71",
              "parentUUID": "6c53a2e4-db98-454d-aa69-3177e3e61ad6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4b59892-b959-4464-a839-0a33087d5485",
            "782f4f88-5695-4b03-ba13-d659edf4a4a3",
            "aca6b186-236a-4483-aa09-43efaee51b71"
          ],
          "failures": [
            "50ebcf3c-07f3-4d64-88da-36fffb3261ec",
            "107189bd-6fc0-497f-918e-42483c647177",
            "2f5ae7fe-3be8-439b-a411-d28daad5ac36",
            "61aa22b7-b2d9-4b4a-931f-b85c7bd6a32c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bdfd2ded-2c7b-43cf-b190-736a5c30b3ed",
          "title": "drop Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\drop.test.js",
          "file": "\\test\\drop.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should drop 1 element by default",
              "fullTitle": "drop Function Tests should drop 1 element by default",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([1, 2, 3])).to.deep.equal([2, 3]);",
              "err": {},
              "uuid": "840e3985-76cc-4e3d-badc-e2d907081b46",
              "parentUUID": "bdfd2ded-2c7b-43cf-b190-736a5c30b3ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should drop specified number of elements",
              "fullTitle": "drop Function Tests should drop specified number of elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([1, 2, 3], 2)).to.deep.equal([3]);",
              "err": {},
              "uuid": "1e58d121-8637-4295-a831-0060cafbd87e",
              "parentUUID": "bdfd2ded-2c7b-43cf-b190-736a5c30b3ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if more elements are dropped than available",
              "fullTitle": "drop Function Tests should return an empty array if more elements are dropped than available",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([1, 2, 3], 5)).to.deep.equal([]);",
              "err": {},
              "uuid": "5ba2c5b5-4c94-4285-bcf7-daa495807724",
              "parentUUID": "bdfd2ded-2c7b-43cf-b190-736a5c30b3ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the original array if 0 elements are dropped",
              "fullTitle": "drop Function Tests should return the original array if 0 elements are dropped",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([1, 2, 3], 0)).to.deep.equal([1, 2, 3]);",
              "err": {},
              "uuid": "5e8e6ff9-3c06-48d9-9fa2-37ba56280935",
              "parentUUID": "bdfd2ded-2c7b-43cf-b190-736a5c30b3ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array for a null or undefined array",
              "fullTitle": "drop Function Tests should return an empty array for a null or undefined array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop(null)).to.deep.equal([]);\nexpect(drop(undefined)).to.deep.equal([]);",
              "err": {},
              "uuid": "5aaad33c-21d0-4727-8ddb-e9797e86c2b8",
              "parentUUID": "bdfd2ded-2c7b-43cf-b190-736a5c30b3ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not drop any elements if a negative number is specified",
              "fullTitle": "drop Function Tests should not drop any elements if a negative number is specified",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([1, 2, 3], -1)).to.deep.equal([1, 2, 3]);",
              "err": {},
              "uuid": "33bd6931-75d6-44a3-9a42-32986297037a",
              "parentUUID": "bdfd2ded-2c7b-43cf-b190-736a5c30b3ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle non-integer numbers by dropping the integer part of the number",
              "fullTitle": "drop Function Tests should handle non-integer numbers by dropping the integer part of the number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(drop([1, 2, 3, 4], 1.5)).to.deep.equal([2, 3, 4]);",
              "err": {},
              "uuid": "2cbc17a4-eb18-4749-9793-21628771eb07",
              "parentUUID": "bdfd2ded-2c7b-43cf-b190-736a5c30b3ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "840e3985-76cc-4e3d-badc-e2d907081b46",
            "1e58d121-8637-4295-a831-0060cafbd87e",
            "5ba2c5b5-4c94-4285-bcf7-daa495807724",
            "5e8e6ff9-3c06-48d9-9fa2-37ba56280935",
            "5aaad33c-21d0-4727-8ddb-e9797e86c2b8",
            "33bd6931-75d6-44a3-9a42-32986297037a",
            "2cbc17a4-eb18-4749-9793-21628771eb07"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
          "title": "filter Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\filter.test.js",
          "file": "\\test\\filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should filter an array based on a predicate",
              "fullTitle": "filter Function Tests should filter an array based on a predicate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\nexpect(filter(users, ({ active }) => active)).to.deep.equal([users[0]]);",
              "err": {},
              "uuid": "654d038d-8eac-4550-9cd7-c64be3cba548",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no elements pass the predicate",
              "fullTitle": "filter Function Tests should return an empty array if no elements pass the predicate",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 3, 4];\nexpect(filter(numbers, num => num > 5)).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/filter.test.js:16:53)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "50908f64-479f-49d8-850a-6aa86831c4d3",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an array of mixed types",
              "fullTitle": "filter Function Tests should handle an array of mixed types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mixedArray = [1, 'a', {}, false, true];\nexpect(filter(mixedArray, item => typeof item === 'number')).to.deep.equal([1]);",
              "err": {},
              "uuid": "f7e71440-503c-45a0-a07a-dc876199676c",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not modify the original array",
              "fullTitle": "filter Function Tests should not modify the original array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nfilter(array, n => n > 1);\nexpect(array).to.deep.equal([1, 2, 3]);",
              "err": {},
              "uuid": "1bee32fb-369f-4500-90e4-a0123712ef9e",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty array",
              "fullTitle": "filter Function Tests should handle an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter([], val => val)).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/filter.test.js:31:44)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "7b18dc5e-3998-4173-846a-b206eda30bfe",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with complex predicates",
              "fullTitle": "filter Function Tests should work with complex predicates",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const complexArray = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];\nexpect(filter(complexArray, obj => obj.id === 2)).to.deep.equal([complexArray[1]]);",
              "err": {},
              "uuid": "32cf22ef-35b6-41ce-99d7-c9ed14126a8e",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array for null or undefined input",
              "fullTitle": "filter Function Tests should return empty array for null or undefined input",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(filter(null, val => val)).to.deep.equal([]);\nexpect(filter(undefined, val => val)).to.deep.equal([]);",
              "err": {
                "message": "AssertionError: expected [ [] ] to deeply equal []",
                "estack": "AssertionError: expected [ [] ] to deeply equal []\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/filter.test.js:40:46)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": "- [\n-   []\n- ]\n+ []\n"
              },
              "uuid": "2d84f72c-e29d-4497-ba3a-22b58b3c52bb",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass index and array arguments to the predicate",
              "fullTitle": "filter Function Tests should pass index and array arguments to the predicate",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spyPredicate = (value, index, array) => {\n  expect(array).to.include.members([1, 2, 3]);\n  return value === 2;\n};\nconst array = [1, 2, 3];\nexpect(filter(array, spyPredicate)).to.deep.equal([2]);",
              "err": {},
              "uuid": "0446eebf-62c5-4889-8d65-78099cd5de0a",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle a predicate that always returns true",
              "fullTitle": "filter Function Tests should handle a predicate that always returns true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nexpect(filter(array, () => true)).to.deep.equal(array);",
              "err": {},
              "uuid": "659b4971-9d38-45cd-96c4-a87e6c48de5b",
              "parentUUID": "07c1a7f8-1577-4de6-99d1-ebd0e69c2530",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "654d038d-8eac-4550-9cd7-c64be3cba548",
            "f7e71440-503c-45a0-a07a-dc876199676c",
            "1bee32fb-369f-4500-90e4-a0123712ef9e",
            "32cf22ef-35b6-41ce-99d7-c9ed14126a8e",
            "0446eebf-62c5-4889-8d65-78099cd5de0a",
            "659b4971-9d38-45cd-96c4-a87e6c48de5b"
          ],
          "failures": [
            "50908f64-479f-49d8-850a-6aa86831c4d3",
            "7b18dc5e-3998-4173-846a-b206eda30bfe",
            "2d84f72c-e29d-4497-ba3a-22b58b3c52bb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
          "title": "isDate Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\isDate.test.js",
          "file": "\\test\\isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a Date object",
              "fullTitle": "isDate Function Tests should return true for a Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Date())).to.be.true;",
              "err": {},
              "uuid": "0acb623f-1453-4d1f-bbda-8f348c849e4f",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string representing a date",
              "fullTitle": "isDate Function Tests should return false for a string representing a date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate('Mon April 23 2012')).to.be.false;",
              "err": {},
              "uuid": "a1ef4ed8-9f10-46b2-8337-1b26b3906841",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null",
              "fullTitle": "isDate Function Tests should return false for null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;",
              "err": {},
              "uuid": "5166780a-c6d1-40d6-a6cb-31775278feb4",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for undefined",
              "fullTitle": "isDate Function Tests should return false for undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "d3f41f49-fce8-401d-8245-e3c7c07f0bb0",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a number",
              "fullTitle": "isDate Function Tests should return false for a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(12345)).to.be.false;",
              "err": {},
              "uuid": "a4b80100-ace1-49d9-b73b-d138b1730d9e",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for an array",
              "fullTitle": "isDate Function Tests should return false for an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate([2020, 1, 1])).to.be.false;",
              "err": {},
              "uuid": "c13ed207-4031-481c-977b-8d09723d98b1",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for an object",
              "fullTitle": "isDate Function Tests should return false for an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate({ year: 2020, month: 1, day: 1 })).to.be.false;",
              "err": {},
              "uuid": "4ab1cb07-9b61-406c-9e27-bb670a99d9b5",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a boolean",
              "fullTitle": "isDate Function Tests should return false for a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(true)).to.be.false;\nexpect(isDate(false)).to.be.false;",
              "err": {},
              "uuid": "5a1595e4-7f1f-427f-9d30-4eb8afd5ac01",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a function",
              "fullTitle": "isDate Function Tests should return false for a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(() => {})).to.be.false;",
              "err": {},
              "uuid": "e93797d2-d2d0-4562-8806-01782c741c18",
              "parentUUID": "b428a682-d3e5-4b6d-bb3f-0621ab4bbf7c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0acb623f-1453-4d1f-bbda-8f348c849e4f",
            "a1ef4ed8-9f10-46b2-8337-1b26b3906841",
            "5166780a-c6d1-40d6-a6cb-31775278feb4",
            "d3f41f49-fce8-401d-8245-e3c7c07f0bb0",
            "a4b80100-ace1-49d9-b73b-d138b1730d9e",
            "c13ed207-4031-481c-977b-8d09723d98b1",
            "4ab1cb07-9b61-406c-9e27-bb670a99d9b5",
            "5a1595e4-7f1f-427f-9d30-4eb8afd5ac01",
            "e93797d2-d2d0-4562-8806-01782c741c18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fccf472f-722a-40b0-86cb-43e9d6537b77",
          "title": "map Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\map.test.js",
          "file": "\\test\\map.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should map an array of numbers using a provided function",
              "fullTitle": "map Function Tests should map an array of numbers using a provided function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function square(n) {\n  return n * n;\n}\nexpect(map([4, 8], square)).to.deep.equal([16, 64]);",
              "err": {},
              "uuid": "834fbba6-1d2e-4018-964f-7695c2095013",
              "parentUUID": "fccf472f-722a-40b0-86cb-43e9d6537b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an array of objects and access their properties",
              "fullTitle": "map Function Tests should handle an array of objects and access their properties",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [{ 'user': 'barney' }, { 'user': 'fred' }];\nexpect(map(users, obj => obj.user)).to.deep.equal(['barney', 'fred']);",
              "err": {},
              "uuid": "16e1b57d-ad82-4649-a046-4aa4f63a614e",
              "parentUUID": "fccf472f-722a-40b0-86cb-43e9d6537b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should pass index and array arguments to the iteratee",
              "fullTitle": "map Function Tests should pass index and array arguments to the iteratee",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const spyIteratee = (value, index, array) => {\n  expect(array).to.include.members([1, 2, 3]);\n  return value * index;\n};\nexpect(map([1, 2, 3], spyIteratee)).to.deep.equal([0, 2, 6]);",
              "err": {},
              "uuid": "3c7cd491-f221-42e3-b88b-3fabfa747b62",
              "parentUUID": "fccf472f-722a-40b0-86cb-43e9d6537b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty array",
              "fullTitle": "map Function Tests should handle an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map([], val => val * 2)).to.deep.equal([]);",
              "err": {},
              "uuid": "1c2d38a5-d54b-40a2-ad06-3422e604457d",
              "parentUUID": "fccf472f-722a-40b0-86cb-43e9d6537b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array for null or undefined input",
              "fullTitle": "map Function Tests should return empty array for null or undefined input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(map(null, val => val)).to.deep.equal([]);\nexpect(map(undefined, val => val)).to.deep.equal([]);",
              "err": {},
              "uuid": "2d16916b-5ad7-4581-b9e2-29b227107762",
              "parentUUID": "fccf472f-722a-40b0-86cb-43e9d6537b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an array of mixed types",
              "fullTitle": "map Function Tests should handle an array of mixed types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mixedArray = [1, 'a', {}, true];\nexpect(map(mixedArray, item => typeof item)).to.deep.equal(['number', 'string', 'object', 'boolean']);",
              "err": {},
              "uuid": "28e6d03e-b727-44ad-a24a-b959a52b8d12",
              "parentUUID": "fccf472f-722a-40b0-86cb-43e9d6537b77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not modify the original array",
              "fullTitle": "map Function Tests should not modify the original array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3];\nmap(array, n => n * 2);\nexpect(array).to.deep.equal([1, 2, 3]);",
              "err": {},
              "uuid": "cae700e1-8df8-4b95-bb01-f776b86079f8",
              "parentUUID": "fccf472f-722a-40b0-86cb-43e9d6537b77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "834fbba6-1d2e-4018-964f-7695c2095013",
            "16e1b57d-ad82-4649-a046-4aa4f63a614e",
            "3c7cd491-f221-42e3-b88b-3fabfa747b62",
            "1c2d38a5-d54b-40a2-ad06-3422e604457d",
            "2d16916b-5ad7-4581-b9e2-29b227107762",
            "28e6d03e-b727-44ad-a24a-b959a52b8d12",
            "cae700e1-8df8-4b95-bb01-f776b86079f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc7c0ebd-71ec-4d81-82be-fd13d2d46c87",
          "title": "Reduce Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\reduce.test.js",
          "file": "\\test\\reduce.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should reduce an array with an initial accumulator value",
              "fullTitle": "Reduce Function Tests should reduce an array with an initial accumulator value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce([1, 2, 3], (sum, n) => sum + n, 0)).to.equal(6);",
              "err": {},
              "uuid": "6d7d5172-42e2-4985-92f3-5872c765ddcc",
              "parentUUID": "fc7c0ebd-71ec-4d81-82be-fd13d2d46c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reduce an array without an initial accumulator value",
              "fullTitle": "Reduce Function Tests should reduce an array without an initial accumulator value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce([1, 2, 3], (sum, n) => sum + n)).to.equal(6);",
              "err": {},
              "uuid": "af980282-20e5-4c14-9146-05ca54af9dd5",
              "parentUUID": "fc7c0ebd-71ec-4d81-82be-fd13d2d46c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reduce an object",
              "fullTitle": "Reduce Function Tests should reduce an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const object = { 'a': 1, 'b': 2, 'c': 1 };\nconst result = reduce(object, (res, value, key) => {\n  (res[value] || (res[value] = [])).push(key);\n  return res;\n}, {});\nexpect(result).to.deep.equal({ '1': ['a', 'c'], '2': ['b'] });",
              "err": {},
              "uuid": "edb19392-e0f6-48dd-8673-565485ff4053",
              "parentUUID": "fc7c0ebd-71ec-4d81-82be-fd13d2d46c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty collection",
              "fullTitle": "Reduce Function Tests should handle an empty collection",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce([], (sum, n) => sum + n, 0)).to.equal(0);",
              "err": {},
              "uuid": "9a4b5229-1d9b-41f6-a860-71fb5a40848a",
              "parentUUID": "fc7c0ebd-71ec-4d81-82be-fd13d2d46c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle a collection with a single element",
              "fullTitle": "Reduce Function Tests should handle a collection with a single element",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce([5], (sum, n) => sum + n)).to.equal(5);",
              "err": {},
              "uuid": "ed693484-d527-4bbb-8b55-8dd451f75b3f",
              "parentUUID": "fc7c0ebd-71ec-4d81-82be-fd13d2d46c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the initial accumulator when the collection is empty",
              "fullTitle": "Reduce Function Tests should return the initial accumulator when the collection is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce([], (sum, n) => sum + n, 10)).to.equal(10);",
              "err": {},
              "uuid": "35ca9ec0-7992-4661-aa64-6de1c1c87f0f",
              "parentUUID": "fc7c0ebd-71ec-4d81-82be-fd13d2d46c87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should correctly use the first element as the initial accumulator if none is provided",
              "fullTitle": "Reduce Function Tests should correctly use the first element as the initial accumulator if none is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(reduce([2, 3, 4], (sum, n) => sum + n)).to.equal(9);",
              "err": {},
              "uuid": "5bc0fe18-3ae0-4e13-89d5-01c7db362355",
              "parentUUID": "fc7c0ebd-71ec-4d81-82be-fd13d2d46c87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d7d5172-42e2-4985-92f3-5872c765ddcc",
            "af980282-20e5-4c14-9146-05ca54af9dd5",
            "edb19392-e0f6-48dd-8673-565485ff4053",
            "9a4b5229-1d9b-41f6-a860-71fb5a40848a",
            "ed693484-d527-4bbb-8b55-8dd451f75b3f",
            "35ca9ec0-7992-4661-aa64-6de1c1c87f0f",
            "5bc0fe18-3ae0-4e13-89d5-01c7db362355"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
          "title": "Slice Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\slice.test.js",
          "file": "\\test\\slice.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should slice a portion of an array",
              "fullTitle": "Slice Function Tests should slice a portion of an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4];\nexpect(slice(array, 2)).to.deep.equal([3, 4]);",
              "err": {},
              "uuid": "d69bc641-152d-474d-a904-39c094d5d32f",
              "parentUUID": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should slice a portion of an array with a specified end",
              "fullTitle": "Slice Function Tests should slice a portion of an array with a specified end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4];\nexpect(slice(array, 1, 3)).to.deep.equal([2, 3]);",
              "err": {},
              "uuid": "f2c3db75-0b73-4c6f-9ab7-cc88a3024225",
              "parentUUID": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative start index",
              "fullTitle": "Slice Function Tests should handle negative start index",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4];\nexpect(slice(array, -2)).to.deep.equal([3, 4]);",
              "err": {},
              "uuid": "ca233919-37e7-40d7-b3bb-5c14bcf44fd7",
              "parentUUID": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative end index",
              "fullTitle": "Slice Function Tests should handle negative end index",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4];\nexpect(slice(array, 1, -1)).to.deep.equal([2, 3]);",
              "err": {},
              "uuid": "9396253a-a3f9-4e55-b181-ccbb68219dbf",
              "parentUUID": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array for invalid start index",
              "fullTitle": "Slice Function Tests should return empty array for invalid start index",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4];\nexpect(slice(array, 5)).to.deep.equal([]);",
              "err": {},
              "uuid": "240731fb-cd27-4ecb-bec9-ba5ff3692b2d",
              "parentUUID": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty array for null or undefined array",
              "fullTitle": "Slice Function Tests should return empty array for null or undefined array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(slice(null)).to.deep.equal([]);\nexpect(slice(undefined)).to.deep.equal([]);",
              "err": {},
              "uuid": "f8d7c077-39c7-428d-affd-da8fed851520",
              "parentUUID": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the full array if start and end are not specified",
              "fullTitle": "Slice Function Tests should return the full array if start and end are not specified",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4];\nexpect(slice(array)).to.deep.equal([1, 2, 3, 4]);",
              "err": {},
              "uuid": "22963b98-a8d0-4b66-9de6-535747e16c18",
              "parentUUID": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if start is greater than end",
              "fullTitle": "Slice Function Tests should return an empty array if start is greater than end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array = [1, 2, 3, 4];\nexpect(slice(array, 3, 2)).to.deep.equal([]);",
              "err": {},
              "uuid": "7cb78195-cf2e-4369-a75b-bf9ce87e4597",
              "parentUUID": "c9d4f5c5-b728-4c24-903a-8c34f23e6953",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d69bc641-152d-474d-a904-39c094d5d32f",
            "f2c3db75-0b73-4c6f-9ab7-cc88a3024225",
            "ca233919-37e7-40d7-b3bb-5c14bcf44fd7",
            "9396253a-a3f9-4e55-b181-ccbb68219dbf",
            "240731fb-cd27-4ecb-bec9-ba5ff3692b2d",
            "f8d7c077-39c7-428d-affd-da8fed851520",
            "22963b98-a8d0-4b66-9de6-535747e16c18",
            "7cb78195-cf2e-4369-a75b-bf9ce87e4597"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
          "title": "toString Function Tests",
          "fullFile": "C:\\Users\\arttu.merilainen\\Documents\\Testing\\COMP.SE.200-2023-2024-1\\test\\toString.test.js",
          "file": "\\test\\toString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should convert a number to a string",
              "fullTitle": "toString Function Tests should convert a number to a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(123)).to.equal('123');",
              "err": {},
              "uuid": "101f47e6-dabd-4cc6-9628-ca7ab843dd44",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert an array to a string",
              "fullTitle": "toString Function Tests should convert an array to a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString([1, 2, 3])).to.equal('1,2,3');",
              "err": {},
              "uuid": "958ee7e9-b47a-4f88-bdc6-1ffae5bd7dba",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert null to an empty string",
              "fullTitle": "toString Function Tests should convert null to an empty string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(null)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'null' to equal ''",
                "estack": "AssertionError: expected 'null' to equal ''\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/toString.test.js:15:31)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": "- null\n"
              },
              "uuid": "01a324c9-9bc2-4cb8-9d06-5613a64c9a34",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert undefined to an empty string",
              "fullTitle": "toString Function Tests should convert undefined to an empty string",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(undefined)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'undefined' to equal ''",
                "estack": "AssertionError: expected 'undefined' to equal ''\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/toString.test.js:19:36)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": "- undefined\n"
              },
              "uuid": "b89893c9-a409-456b-b661-06e8602904e8",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should preserve the sign of -0",
              "fullTitle": "toString Function Tests should preserve the sign of -0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-0)).to.equal('-0');",
              "err": {},
              "uuid": "bde1acfa-f283-4443-a384-b06025ba7025",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the same string for string inputs",
              "fullTitle": "toString Function Tests should return the same string for string inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString('hello')).to.equal('hello');",
              "err": {},
              "uuid": "01b72b4c-1e9b-41bb-9263-aa6e6ed72aea",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle boolean values correctly",
              "fullTitle": "toString Function Tests should handle boolean values correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(true)).to.equal('true');\nexpect(toString(false)).to.equal('false');",
              "err": {},
              "uuid": "24be4356-ee73-452e-bb2e-1b1d2ce63b25",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects correctly",
              "fullTitle": "toString Function Tests should handle objects correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString({ a: 1 })).to.equal('[object Object]');",
              "err": {},
              "uuid": "c2b36d4f-4aed-4b0a-bfda-38287608ec2a",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle symbols correctly",
              "fullTitle": "toString Function Tests should handle symbols correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const symbol = Symbol('test');\nexpect(toString(symbol)).to.equal(symbol.toString());",
              "err": {},
              "uuid": "66c00355-f5e6-46fe-82fc-3a774ca81442",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle nested arrays correctly",
              "fullTitle": "toString Function Tests should handle nested arrays correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString([1, [2, 3], 4])).to.equal('1,2,3,4');",
              "err": {},
              "uuid": "5e683f37-44c1-4485-ae70-4e46dbc49d12",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert NaN to a string",
              "fullTitle": "toString Function Tests should convert NaN to a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(NaN)).to.equal('NaN');",
              "err": {},
              "uuid": "320f844a-8128-4b37-b77a-eea7c4662a3b",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with null and undefined correctly",
              "fullTitle": "toString Function Tests should handle arrays with null and undefined correctly",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString([1, null, undefined, 2])).to.equal('1,,2');",
              "err": {
                "message": "AssertionError: expected '1,,,2' to equal '1,,2'",
                "estack": "AssertionError: expected '1,,,2' to equal '1,,2'\n    at Context.<anonymous> (file:///C:/Users/arttu.merilainen/Documents/Testing/COMP.SE.200-2023-2024-1/test/toString.test.js:53:50)\n    at processImmediate (node:internal/timers:464:21)",
                "diff": "- 1,,,2\n+ 1,,2\n"
              },
              "uuid": "3082bf49-eb77-417e-8835-60d6f9461bd1",
              "parentUUID": "8b688cd6-409c-4c31-9d55-9c261889bbc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "101f47e6-dabd-4cc6-9628-ca7ab843dd44",
            "958ee7e9-b47a-4f88-bdc6-1ffae5bd7dba",
            "bde1acfa-f283-4443-a384-b06025ba7025",
            "01b72b4c-1e9b-41bb-9263-aa6e6ed72aea",
            "24be4356-ee73-452e-bb2e-1b1d2ce63b25",
            "c2b36d4f-4aed-4b0a-bfda-38287608ec2a",
            "66c00355-f5e6-46fe-82fc-3a774ca81442",
            "5e683f37-44c1-4485-ae70-4e46dbc49d12",
            "320f844a-8128-4b37-b77a-eea7c4662a3b"
          ],
          "failures": [
            "01a324c9-9bc2-4cb8-9d06-5613a64c9a34",
            "b89893c9-a409-456b-b661-06e8602904e8",
            "3082bf49-eb77-417e-8835-60d6f9461bd1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}